
 
 
 
ASSIGNMENT 5 AIM: 
PL/SQL Stored Procedure and Stored Function. 
Write a Stored Procedure namely proc_Grade for the categorization of student. If marks scored by students in examination is <=1500 and marks>=990 then student will be placed in distinction category if marks scored are between 989 and900 category is first class, if marks 899 and 825 category is Higher Second Class Write a PL/SQL block for using procedure created with above requirement. 
Stud_Marks(name, total_marks) 
Result(Roll,Name, Class) 
 
LEARNING OBJECTIVES: 
1) To understand implementation of stored Procedure in PL/SQL. 
2) To understand implementation of stored Function in PL/SQL. 
 
THEORY: 
PROCEDURES IN PL/SQL 
PL/SQL is a block-structured language that enables developers to combine the power of SQL with procedural statements. 
A stored procedure in PL/SQL is nothing but a series of declarative SQL statements which can be stored in the database catalogue. A procedure can be thought of as a function or a method. They can be invoked through triggers, other procedures, or applications on Java, PHP etc. All the statements of a block are passed to Oracle engine all at once which increases processing speed and decreases the traffic. 
Advantages: 
• They result in performance improvement of the application. If a procedure is being called frequently in an application in a single connection, then the compiled version of the procedure is delivered. 
• They reduce the traffic between the database and the application, since the lengthy statements are already fed into the database and need not be sent again and again via the application. 
• They add to code reusability, similar to how functions and methods work in other languages such as C/C++ and Java. 
Disadvantages: 
• Stored procedures can cause a lot of memory usage. The database administrator should decide an upper bound as to how many stored procedures are feasible for a particular application. 
• MySQL does not provide the functionality of debugging the stored procedures. 
 
Syntax to create a stored procedure 
SET ANSI_NULLS ON 
GO 
SET QUOTED_IDENTIFIER ON 
GO 
-- Comments -- 
CREATE PROCEDURE procedure_name 
= , 
= , 
= 
AS 
BEGIN 
-- Query -- 
END 
 
Example: 
CREATE PROCEDURE GetStudentDetails 
@StudentID int = 0 
AS 
BEGIN 
SET NOCOUNT ON; 
SELECT FirstName, LastName, BirthDate, City, Country 
FROM Students WHERE StudentID=@StudentID END 
 
Syntax to modify an existing stored procedure 
ALTER PROCEDURE procedure_name 
= , 
AS 
BEGIN 
-- Query -- 
END 
 
Example: 
ALTER PROCEDURE GetStudentDetails 
@StudentID int = 0 
AS 
BEGIN 
SET NOCOUNT ON; 
SELECT FirstName, LastName, City 
FROM Students WHERE StudentID=@StudentID END 
 
Syntax to drop a Procedure: 
DROP PROCEDURE procedure_name Example: 
DROP PROCEDURE GetStudentDetails 
 
PL/SQL - FUNCTIONS 
A function is same as a procedure except that it returns a value. Therefore, all the discussions of the previous chapter are true for functions too. 
CREATING A FUNCTION 
A standalone function is created using the CREATE FUNCTION statement. The simplified syntax for the 
CREATE OR REPLACE FUNCTION statement is as follows – 
CREATE [OR REPLACE] FUNCTION function_name 
[(parameter_name [IN | OUT | IN OUT] type [, ...])] 
RETURN return_datatype 
{IS | AS} 
BEGIN 
< function_body > 
END [function_name]; 
Where, 
• function-name specifies the name of the function. 
• [OR REPLACE] option allows the modification of an existing function. 
• The optional parameter list contains name, mode and types of the parameters. IN represents the value that will be passed from outside and OUT represents the parameter that will be used to return a value outside of the procedure. 
• The function must contain a return statement. 
• The RETURN clause specifies the data type you are going to return from the function. 
• function-body contains the executable part. 
• The AS keyword is used instead of the IS keyword for creating a standalone function. 
 
EXAMPLE 
The following example illustrates how to create and call a standalone function. This function returns the total number of CUSTOMERS in the customers table. 
We will use the CUSTOMERS table, which we had created in the PL/SQL Variables chapter − Select * from customers; 
+----+----------+-----+-----------+----------+ 
| ID | NAME | AGE | ADDRESS | SALARY | 
+----+----------+-----+-----------+----------+ 
| 1 | Ramesh | 32 | Ahmedabad | 2000.00 | 
| 2 | Khilan | 25 | Delhi | 1500.00 | 
| 3 | kaushik | 23 | Kota | 2000.00 | 
| 4 | Chaitali | 25 | Mumbai | 6500.00 | 
| 5 | Hardik | 27 | Bhopal | 8500.00 | 
| 6 | Komal | 22 | MP | 4500.00 | 
+----+----------+-----+-----------+----------+ 
 
CREATE OR REPLACE FUNCTION totalCustomers 
RETURN number IS 
total number(2) := 0; 
BEGIN 
SELECT count(*) into total 
FROM customers; 
RETURN total; 
END; 
/ 
When the above code is executed using the SQL prompt, it will produce the following result Function created. 
 
CALLING A FUNCTION 
While creating a function, you give a definition of what the function has to do. To use a function, you will have to call that function to perform the defined task. When a program calls a function, the program control is transferred to the called function. 
A called function performs the defined task and when its return statement is executed or when the last end statement is reached, it returns the program control back to the main program. 
To call a function, you simply need to pass the required parameters along with the function name and if the function returns a value, then you can store the returned value. Following program calls the function totalCustomers from an anonymous block 
DECLARE 
c number(2); BEGIN 
c := totalCustomers(); 
dbms_output.put_line('Total no. of Customers: ' || c); 
END; 
/ 
When the above code is executed at the SQL prompt, it produces the following result − 
Total no. of Customers: 6 
PL/SQL procedure successfully completed. 
EXAMPLE 
The following example demonstrates Declaring, Defining, and Invoking a Simple PL/SQL Function that computes and returns the maximum of two values. 
DECLARE 
a number; b number; c number; 
FUNCTION findMax(x IN number, y IN number) 
RETURN number 
IS z number; 
BEGIN 
IF x > y THEN 
    z:= x; 
ELSE 
   Z:= y; 
END IF; 
RETURN z; 
END; 
BEGIN 
a:= 23; b:= 45; c := findMax(a, b); 
dbms_output.put_line(' Maximum of (23,45): ' || c); 
END; 
/ 
When the above code is executed at the SQL prompt, it produces the following result 
Maximum of (23,45): 45 
PL/SQL procedure successfully completed. 
 
PL/SQL RECURSIVE FUNCTIONS 
We have seen that a program or subprogram may call another subprogram. When a subprogram calls itself, it is referred to as a recursive call and the process is known as recursion. 
To illustrate the concept, let us calculate the factorial of a number. Factorial of a number n is defined as − n! = n*(n-1)! 
= n*(n-1)*(n-2)! 
... 
= n*(n-1)*(n-2)*(n-3)... 1 
The following program calculates the factorial of a given number by calling itself recursively − 
DECLARE 
num number; factorial number; 
FUNCTION fact(x number) 
RETURN number 
IS f number; 
BEGIN 
IF x=0 THEN 
     f := 1; 
ELSE 
    f := x * fact(x-1); 
END IF; 
RETURN f; 
END; 
 
BEGIN num:= 6; 
factorial := fact(num); 
dbms_output.put_line(' Factorial '|| num || ' is ' || factorial); 
END; 
/ 
When the above code is executed at the SQL prompt, it produces the following result − Factorial 6 is 720 
PL/SQL procedure successfully completed. 
SIMILARITIES BETWEEN PROCEDURE AND FUNCTION · Both can be called from other PL/SQL blocks. 
• If the exception raised in the subprogram is not handled in the subprogram exception handling section, then it will propagate to the calling block. 
• Both can have as many parameters as required. 
• Both are treated as database objects in PL/SQL. 
PROCEDURE VS. FUNCTION: KEY DIFFERENCES 
 
BUILT-IN FUNCTIONS IN PL/SQL 
PL/SQL contains various built-in functions to work with strings and date datatype. Here we are going to see the commonly used functions and their usage. 
 
CONVERSION FUNCTIONS 
 
These built-in functions are used to convert one datatype to another datatype. 
STRING FUNCTIONS 
These are the functions that are used on the character datatype. 
 
 
DATE FUNCTIONS 
These are functions that are used for manipulating with dates. 
 
Algorithms: 
1. Start 
2. Create Required Tables in database. 
3. Insert some records 
4. Read records from Table. 
5. If marks<=1500and marks>=990 
Class=distinction 
Else if marks<=989 and marks>=900 
Class=First class 
Else if marks<=899 and marks>=825 
Class= Higher Second Class 
6. Insert record in Result table. 
7. Display content of both tables. 
8. Stop. 
 
CONCLUSION: Hence we have studied and implemented Stored Procedure and Functions. 