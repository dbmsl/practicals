ASSIGNMENT 9 
 
AIM: Implement CRUD in MongoDB. 
 
LEARNING OBJECTIVES: 
Understanding Create, Read, Update and Delete (CRUD) in MongoDB. 
 
THEORY: 
MongoDB is a cross-platform, document oriented database that provides, high performance, high availability, and easy scalability. MongoDB works on concept of collection and document. 
DATABASE 
Database is a physical container for collections. Each database gets its own set of files on the file system. A single MongoDB server typically has multiple databases. 
COLLECTION 
Collection is a group of MongoDB documents. It is the equivalent of an RDBMS table. A collection exists within a single database. Collections do not enforce a schema. Documents within a collection can have different fields. Typically, all documents in a collection are of similar or related purpose. 
DOCUMENT 
A document is a set of key-value pairs. Documents have dynamic schema. Dynamic schema means that documents in the same collection do not need to have the same set of fields or structure, and common fields in a collection's documents may hold different types of data. 
The following table shows the relationship of RDBMS terminology with MongoDB. 
 
SAMPLE DOCUMENT 
Following example shows the document structure of a blog site, which is simply a comma separated key value pair. 
{ 
_id: ObjectId(7df78ad8902c) title: 'MongoDB Overview', 
description: 'MongoDB is no sql database', 
by: 'tutorials point', url: 'http://www.tutorialspoint.com', tags: ['mongodb', 'database', 'NoSQL'], likes: 100, 
comments: [ 
   { user:'user1', 
message: 'My first comment', dateCreated: new Date(2011,1,20,2,15), like: 0 
   }, 
  { 
user:'user2', 
message: 'My second comments', 
dateCreated: new Date(2011,1,25,7,45), like: 5 
  } 
 ] 
} 
_id is a 12 bytes hexadecimal number which assures the uniqueness of every document. You can provide _id while inserting the document. If you don’t provide then MongoDB provides a unique id for every document. 
These 12 bytes first 4 bytes for the current timestamp, next 3 bytes for machine id, next 2 bytes for process id of MongoDB server and remaining 3 bytes are simple incremental VALUE. 
Any relational database has a typical schema design that shows number of tables and the relationship between these tables. While in MongoDB, there is no concept of relationship. 
 
ADVANTAGES OF MONGODB OVER RDBMS 
 Schema less − MongoDB is a document database in which one collection holds different documents. 
Number of fields, content and size of the document can differ from one document to another. 
• Structure of a single object is clear. 
• No complex joins. 
• Deep query-ability. MongoDB supports dynamic queries on documents using a document-based query language that's nearly as powerful as SQL. 
• Tuning. 
 Ease of scale-out − MongoDB is easy to scale. 
• Conversion/mapping of application objects to database objects not needed. 
• Uses internal memory for storing the (windowed) working set, enabling faster access of data. 
WHY USE MONGODB? 
• Document Oriented Storage − Data is stored in the form of JSON style documents. 
• Index on any attribute 
• Replication and high availability 
• Auto-sharding 
• Rich queries 
• Fast in-place updates 
• Professional support by MongoDB 
WHERE TO USE MONGODB? 
• Big Data 
• Content Management and Delivery 
• Mobile and Social Infrastructure 
• User Data Management 
• Data Hub 
 
SOME CONSIDERATIONS WHILE DESIGNING SCHEMA IN MONGODB 
• Design your schema according to user requirements. 
• Combine objects into one document if you will use them together. Otherwise separate them (but make sure there should not be need of joins). 
• Duplicate the data (but limited) because disk space is cheap as compare to compute time. 
• Do joins while write, not on read. 
• Optimize your schema for most frequent use cases. 
• Do complex aggregation in the schema. 
EXAMPLE 
Suppose a client needs a database design for his blog/website and see the differences between RDBMS and MongoDB schema design. Website has the following requirements. 
• Every post has the unique title, description and url. 
• Every post can have one or more tags. 
• Every post has the name of its publisher and total number of likes. 
• Every post has comments given by users along with their name, message, data-time and likes. 
• On each post, there can be zero or more comments. 
In RDBMS schema, design for above requirements will have minimum three tables. 
 
While in MongoDB schema, design will have one collection post and the following structure − 
{ 
_id: POST_ID title: TITLE_OF_POST, description: POST_DESCRIPTION, by: POST_BY, url: URL_OF_POST, tags: [TAG1, TAG2, TAG3], likes: TOTAL_LIKES, comments: [ 
{ 
user:'COMMENT_BY', message: TEXT, dateCreated: DATE_TIME, 
like: LIKES 
}, 
{ 
user:'COMMENT_BY', message: TEXT, dateCreated: DATE_TIME, 
like: LIKES 
} 
       ] 
} 
So while showing the data, in RDBMS you need to join three tables and in MongoDB, data will be shown from one collection only. 
 
THE USE COMMAND 
MongoDB use DATABASE_NAME is used to create database. The command will create a new database if it doesn't exist, otherwise it will return the existing database. 
SYNTAX 
Basic syntax of use DATABASE statement is as follows − use DATABASE_NAME 
EXAMPLE 
If you want to create a database with name <mydb>, then use DATABASE statement would be as follows − 
>use mydb switched to db mydb 
To check your currently selected database, use the command db 
>db   mydb 
If you want to check your databases list, use the command show dbs. 
>show dbs local 0.78125GB test 0.23012GB 
Your created database (mydb) is not present in list. To display database, you need to insert at least one document into it. 
>db.movie.insert({"name":"tutorials point"}) 
>show dbs local 0.78125GB mydb 0.23012GB test 0.23012GB 
In MongoDB default database is test. If you didn't create any database, then collections will be stored in test database. 
THE DROPDATABASE() METHOD 
MongoDB db.dropDatabase() command is used to drop a existing database. 
SYNTAX 
Basic syntax of dropDatabase() command is as follows − db.dropDatabase() 
This will delete the selected database. If you have not selected any database, then it will delete default 'test' database. 
EXAMPLE 
First, check the list of available databases by using the command, show dbs. 
>show dbs local 0.78125GB mydb 0.23012GB test 0.23012GB > 
If you want to delete new database <mydb>, then dropDatabase() command would be as follows − >use mydb 
switched to db mydb >db.dropDatabase() 
>{ "dropped" : "mydb", "ok" : 1 } 
> 
Now check list of databases. 
>show dbs local 0.78125GB test 0.23012GB 
> 
THE CREATECOLLECTION() METHOD 
MongoDB db.createCollection(name, options) is used to create collection. 
SYNTAX 
Basic syntax of createCollection() command is as follows − db.createCollection(name, options) 
In the command, name is name of collection to be created. Options is a document and is used to specify configuration of collection. 
 
Options parameter is optional, so you need to specify only the name of the collection. Following is the list of options you can use 
 
 While inserting the document, MongoDB first checks size field of capped collection, then it checks max field. 
EXAMPLES 
Basic syntax of createCollection() method without options is as follows − 
>use test 
switched to db test 
>db.createCollection("mycollection") 
{ "ok" : 1 } 
> 
You can check the created collection by using the command show collections. 
>show collections mycollection system.indexes 
The following example shows the syntax of createCollection() method with few important options − 
>db.createCollection("mycol", { capped : true, autoIndexId : true, size : 
6142800, max : 10000 } ) 
{ "ok" : 1 } > 
In MongoDB, you don't need to create collection. MongoDB creates collection automatically, when you insert some document. 
>db.tutorialspoint.insert({"name" : "tutorialspoint"}) 
>show collections mycol mycollection system.indexes 
tutorialspoint 
> 
 
THE DROP() METHOD 
MongoDB's db.collection.drop() is used to drop a collection from the database. 
SYNTAX 
Basic syntax of drop() command is as follows − db.COLLECTION_NAME.drop() 
EXAMPLE 
First, check the available collections into your database mydb. 
>use mydb switched to db mydb >show collections mycol mycollection system.indexes tutorialspoint 
> 
Now drop the collection with the name mycollection. 
>db.mycollection.drop() 
true 
> 
Again check the list of collections into database. 
>show collections mycol system.indexes 
tutorialspoint 
> drop() method will return true, if the selected collection is dropped successfully, otherwise it will return false. 
 
DATATYPES 
MongoDB supports many datatypes. Some of them are − 
• String − This is the most commonly used datatype to store the data. String in MongoDB must be UTF-8 valid. 
• Integer − This type is used to store a numerical value. Integer can be 32 bit or 64 bit depending upon your server. 
• Boolean − This type is used to store a boolean (true/ false) value. 
• Double − This type is used to store floating point values. 
• Min/ Max keys − This type is used to compare a value against the lowest and highest BSON elements. 
• Arrays − This type is used to store arrays or list or multiple values into one key. 
• Timestamp − ctimestamp. This can be handy for recording when a document has been modified or added. 
• Object − This datatype is used for embedded documents. 
• Null − This type is used to store a Null value. 
• Symbol − This datatype is used identically to a string; however, it's generally reserved for languages that use a specific symbol type. 
• Date − This datatype is used to store the current date or time in UNIX time format. You can specify your own date time by creating object of Date and passing day, month, year into it. 
• Object ID − This datatype is used to store the document’s ID. 
• Binary data − This datatype is used to store binary data. 
• Code − This datatype is used to store JavaScript code into the document. 
• Regular expression − This datatype is used to store regular expression. 
 
THE INSERT() METHOD 
To insert data into MongoDB collection, you need to use MongoDB's insert() or save() method. 
SYNTAX 
The basic syntax of insert() command is as follows − 
>db.COLLECTION_NAME.insert(document) 
EXAMPLE 
>db.mycol.insert({ 
_id: ObjectId(7df78ad8902c), title: 'MongoDB Overview', description: 'MongoDB is no sql database', by: 'tutorials point', url: 'http://www.tutorialspoint.com', tags: ['mongodb', 'database', 'NoSQL'], likes: 100 
}) 
 
Here mycol is our collection name, as created in the previous chapter. If the collection doesn't exist in the database, then MongoDB will create this collection and then insert a document into it. 
In the inserted document, if we don't specify the _id parameter, then MongoDB assigns a unique ObjectId for this document. 
_id is 12 bytes hexadecimal number unique for every document in a collection. 12 bytes are divided as follows − 
_id: ObjectId(4 bytes timestamp, 3 bytes machine id, 2 bytes process id,3 bytes incrementer) 
To insert multiple documents in a single query, you can pass an array of documents in insert() command. 
EXAMPLE 
>db.post.insert([ 
{ title: 'MongoDB Overview', 
description: 'MongoDB is no sql database', 
by: 'tutorials point', url: 'http://www.tutorialspoint.com', tags: ['mongodb', 'database', 'NoSQL'], likes: 100 
}, 
{ title: 'NoSQL Database', 
description: "NoSQL database doesn't have tables", by: 'tutorials point', url: 'http://www.tutorialspoint.com', tags: ['mongodb', 'database', 'NoSQL'], likes: 20, comments: [ 
{ 
user:'user1', 
message: 'My first comment', dateCreated: new Date(2013,11,10,2,35), like: 0 
} 
          ] 
} 
]) 
To insert the document you can use db.post.save(document) also. If you don't specify _id in the document then save() method will work same as insert() method. If you specify _id then it will replace whole data of document containing _id as specified in save() method. 
 
THE FIND() METHOD 
To query data from MongoDB collection, you need to use MongoDB's find() method. 
SYNTAX 
The basic syntax of find() method is as follows − 
>db.COLLECTION_NAME.find() 
find() method will display all the documents in a non-structured way. 
THE PRETTY() METHOD 
To display the results in a formatted way, you can use pretty() method. 
SYNTAX 
>db.mycol.find().pretty() 
EXAMPLE 
>db.mycol.find().pretty() 
{ 
"_id": ObjectId(7df78ad8902c), 
"title": "MongoDB Overview", 
"description": "MongoDB is no sql database", 
"by": "tutorials point", 
"url": "http://www.tutorialspoint.com", 
"tags": ["mongodb", "database", "NoSQL"], 
"likes": "100" 
} 
> 
Apart from find() method, there is findOne() method, that returns only one document. 
 
RDBMS WHERE CLAUSE EQUIVALENTS IN MONGODB 
To query the document on the basis of some condition, you can use following operations. 
 
 
AND IN MONGODB 
SYNTAX 
In the find() method, if you pass multiple keys by separating them by ',' then MongoDB treats it as AND condition. Following is the basic syntax of AND − 
>db.mycol.find( 
{ $and:  
[ 
{key1: value1}, {key2:value2} 
] 
} 
).pretty() 
EXAMPLE 
Following example will show all the tutorials written by 'tutorials point' and whose title is 'MongoDB Overview'. 
>db.mycol.find({$and:[{"by":"tutorials point"},{"title": "MongoDB Overview"}]}).pretty()  { 
"_id": ObjectId(7df78ad8902c), 
"title": "MongoDB Overview", 
"description": "MongoDB is no sql database", 
"by": "tutorials point", 
"url": "http://www.tutorialspoint.com", 
"tags": ["mongodb", "database", "NoSQL"], 
"likes": "100" 
} 
For the above given example, equivalent where clause will be ' where by = 'tutorials point' AND title = 'MongoDB Overview' '. You can pass any number of key, value pairs in find clause. 
 
OR IN MONGODB 
To query documents based on the OR condition, you need to use $or keyword. Following is the basic syntax of OR – 
SYNTAX 
>db.mycol.find($or: [{key1: value1}, {key2:value2}]}).pretty() 
EXAMPLE 
Following example will show all the tutorials written by 'tutorials point' or whose title is 'MongoDB Overview'. 
>db.mycol.find({$or:[{"by":"tutorials point"},{"title": "MongoDB Overview"}]}).pretty() { 
"_id": ObjectId(7df78ad8902c), 
"title": "MongoDB Overview", 
"description": "MongoDB is no sql database", 
"by": "tutorials point", 
"url": "http://www.tutorialspoint.com", 
"tags": ["mongodb", "database", "NoSQL"], 
"likes": "100" 
} 
> 
USING AND AND OR TOGETHER 
EXAMPLE 
The following example will show the documents that have likes greater than 10 and whose title is either 
'MongoDB Overview' or by is 'tutorials point'. Equivalent SQL where clause is 'where likes>10 AND (by = 'tutorials point' OR title = 'MongoDB Overview')' 
>db.mycol.find({"likes": {$gt:10}, $or: [{"by": "tutorials point"}, {"title": "MongoDB 
Overview"}]}).pretty() { 
"_id": ObjectId(7df78ad8902c), 
"title": "MongoDB Overview", 
"description": "MongoDB is no sql database", 
"by": "tutorials point", 
"url": "http://www.tutorialspoint.com", 
"tags": ["mongodb", "database", "NoSQL"], 
"likes": "100" 
} 
> 
 
MONGODB UPDATE() METHOD 
The update() method updates the values in the existing document. 
SYNTAX 
The basic syntax of update() method is as follows − 
>db.COLLECTION_NAME.update(SELECTION_CRITERIA, UPDATED_DATA) EXAMPLE 
Consider the mycol collection has the following data. 
{ "_id" : ObjectId(5983548781331adf45ec5), "title":"MongoDB Overview"} 
{ "_id" : ObjectId(5983548781331adf45ec6), "title":"NoSQL Overview"} 
{ "_id" : ObjectId(5983548781331adf45ec7), "title":"Tutorials Point Overview"} 
 
Following example will set the new title 'New MongoDB Tutorial' of the documents whose title is 'MongoDB Overview'. 
>db.mycol.update({'title':'MongoDB Overview'},{$set:{'title':'New MongoDB Tutorial'}}) >db.mycol.find() 
{ "_id" : ObjectId(5983548781331adf45ec5), "title":"New MongoDB Tutorial"} 
{ "_id" : ObjectId(5983548781331adf45ec6), "title":"NoSQL Overview"} 
{ "_id" : ObjectId(5983548781331adf45ec7), "title":"Tutorials Point Overview"} > 
By default, MongoDB will update only a single document. To update multiple documents, you need to set a parameter 'multi' to true. 
>db.mycol.update({'title':'MongoDB Overview'}, 
{$set:{'title':'New MongoDB Tutorial'}},{multi:true}) 
 
MONGODB SAVE() METHOD 
The save() method replaces the existing document with the new document passed in the save() method. 
SYNTAX 
The basic syntax of MongoDB save() method is shown below − 
>db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA}) 
 
EXAMPLE 
Following example will replace the document with the _id '5983548781331adf45ec7'. 
>db.mycol.save( 
{ 
"_id" : ObjectId(5983548781331adf45ec7), "title":"Tutorials Point New Topic", "by":"Tutorials Point" 
} 
) 
>db.mycol.find() 
{ "_id" : ObjectId(5983548781331adf45ec5), "title":"Tutorials Point New Topic", "by":"Tutorials Point"} 
{ "_id" : ObjectId(5983548781331adf45ec6), "title":"NoSQL Overview"} 
{ "_id" : ObjectId(5983548781331adf45ec7), "title":"Tutorials Point Overview"} > 
CREATE 
Our first operation of discussion will be creating objects within the database. MongoDB uses a JSON style object format called BSON as it’s storage. BSON is pretty much a binary representation of a JSON object. So it makes sense that the methods that are enacted upon the database are also JavaScript-esque. We’re going to be creating a users collection and our first user. A collection in MongoDB is synonymous with a table in SQL based databases. 
Let’s take a look: 
db.users.save({name:"John Doe",age:30,job:"engineer",email:"name@example.com"}) 
Above we’re using the MongoDB save() method to save our data to our users collection. 
READ 
Now that we have a data object in our database, we can read it! There are many ways to read data in 
MongoDB. The primary method for reading data is the find() method. Let’s take a look at some basic usage of the find() method. 
db.users.find({name:"John Doe"}) 
In the above statement, we’re querying the database using the find() method with the parameter of {name:”John Doe”}. It’s important to remember that the find() method will return all documents in the database that mach the key value pair. 
We can also manipulate our query by using query cursor methods. 
To return only the first document that matches we need to use the findOne() method: 
db.users.findOne({name:"John Doe"}) 
If you’re just trying to figure out how many documents match your query, you can use the count() method: 
db.users.count({name:"John Doe"}) 
 
UPDATE 
To update a document in your MongoDB database you need to use the update() method. The update method accepts two parameters, the query and the update. The query is the first parameter passed through the method, then the update parameter which is preceded by a comma. 
An example of the update() method looks like this: 
db.users.update({name:"John Doe"}, {age: 28}) 
Be cautious, this will overwrite everything in your document and leave it as just “{ age: 28 }”. 
To update just a single key value pair, we need to add some keywords to the query: 
 	db.users.update({name: "John Doe"}, { $set: { age: 28}}) 
Now we would retain all of the information that was in the document, and just change the value of age. For more options and information regarding the update() method, head over to the MongoDB documentation. 
 
DELETE 
The last method is pretty simple, it’s the remove() method. This method is what you would use to delete data or sets of data from your database: 
db.users.remove({name: "John Doe"}) 
You could use keywords to alter the meaning of the remove method from within the parameter parenthesis, for more on this visit the documentation. 
Like the find() method, this method will delete every document that matches or contains the query parameter unless otherwise specified. 
 
ALGORITHEM: 
1. Start 
2. Create database 
3. Create Collection 
4. Insert some document 
5. Find document from collection 
6. Stop 
 
CONCLUSION: Hence we have implemented insert, update, find and remove in mongodb. 