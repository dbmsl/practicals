 
ASSIGNMENT 3 AIM: 
Design at least 10 SQL queries for suitable database application using SQL DML statements: all types of Join, Sub-Query and View. 
LEARNING OBJECTIVES: 
Understanding Joins and its important 
Understanding Sub-Query, Inner-Query and View 
 
THEORY: 
VIEW: 
A database view is a searchable object in a database that is defined by a query. Though a view doesn’t store data, some refer to a views as “virtual tables,” you can query a view like you can a table. A view can combine data from two or more table, using joins, and also just contain a subset of information. This makes them convenient to abstract, or hide, complicated queries. 
Below is a visual depiction of a view: 
 
How to Create and Use a Database View 
A view is created from a query using the CREATE VIEW command. In the example below we are creating a PopularBooks view based of a query which selects all Books that have the IsPopular field checked. The Query is colored in Blue. 
CREATE VIEW PopularBooks AS 
SELECT ISBN, Title, Author, PublishDate 
FROM Books 
WHERE IsPopular = 1 
Once a view is created you can used then as you would any table in a SELECT statement. For example, to list all the popular book titles ordered by author you could write: 
SELECT Author, Title 
FROM PopularBooks 
ORDER BY Author 
In general you can use any of the SELECT clauses, such as GROUP BY, in a select statement containing a view. 
Benefits of a Database View 
There are many benefits to using views. Listed below are some of the one that come to mind: 
• Enforce Business Rules – Use views to define business rules, such as when an items is active, or what is meant by “popular.” By placing complicated or misunderstood business logic into the view, you can be sure to present a unified portrayal of the data. This increases use and quality. 
• Consistency – Simplify complicated query logic and calculations by hiding it behind the view’s definition. Once defined they calculations are reference from the view rather than being restated in separate queries. This makes for less mistakes and easier maintenance of code. 
• Security – Restrict access to a table, yet allow users to access non-confidential data via views. For example, you can restrict access to the employee table, that contains social security numbers, but allow access to a view containing name and phone number. 
• Simplicity – Databases with many tables possess complex relationships, which can be difficult to navigate if you aren’t comfortable using Joins. Use views to provide a “flattened” view of the database for reporting or ad-hoc queries. 
• Space – Views take up very little space, as the data is stored once in the source table. Some DBMS all you to create an index on a view, so in some cases views do take up more space than the definition. 
DISADVANTAGES OF VIEWS 
• Performance – What may seem like a simple query against a view could turn out to be a hugely complex job for the database engine. That is because each time a view is referenced, the query used to define it, is rerun. 
• Modifications – Not all views support INSERT, UPDATE, or DELETE operations. In general, in order to support these operations, the primary key and required fields must be present in the view. 
Complex multi-table views are generally read only. 
 
SQL JOIN TYPES 
There are four basic types of SQL joins: inner, left, right, and full. The easiest and most intuitive way to explain the difference between these four types is by using a Venn diagram, which shows all possible logical relations between data sets. 
Let’s say we have two sets of data in our relational database: table A and table B, with some sort of relation specified by primary and foreign keys. The result of joining these tables together can be visually represented by the following diagram: 
 
The extent of the overlap, if any, is determined by how many records in Table A match the records in Table B. Depending on what subset of data we would like to select from the two tables, the four join types can be visualized by highlighting the corresponding sections of the Venn diagram: 
 
Select all records from Table A and Table B, where the join condition is met. 
 
Select all records from Table A, along with records from Table B for which the join condition is met (if at all). 
 
Select all records from Table B, along with records from Table A for which the join condition is met (if at all). 
 
 
Select all records from Table A and Table B, regardless of whether the join condition is met or not. 
EXAMPLES OF SQL JOIN TYPES 
Let's use the tables we introduced in the “What is a SQL join?” section to show examples of these joins in action. The relationship between the two tables is specified by the customer_id key, which is the "primary key" in customers table and a "foreign key" in the orders table: 
 
Note that (1) not every customer in our customers table has placed an order and (2) there are a few orders for which no customer record exists in our customers table. 
INNER JOIN 
Let’s say we wanted to get a list of those customers who placed an order and the details of the order they placed. This would be a perfect fit for an inner join, since an inner join returns records at the intersection of the two tables. 
SELECT first_name, last_name, order_date, order_amount 
FROM customers c 
INNER JOIN orders o 
ON c.customer_id = o.customer_id 
 
Note that only George Washington, John Adams and Thomas Jefferson placed orders, with Thomas Jefferson placing two separate orders on 3/14/1760 and 9/03/1790. 
LEFT JOIN 
If we wanted to simply append information about orders to our customers table, regardless of whether a customer placed an order or not, we would use a left join. A left join returns all records from table A and any matching records from table B. 
SELECT first_name, last_name, order_date, order_amount 
FROM customers c 
LEFT JOIN orders o 
ON c.customer_id = o.customer_id 
 
Note that since there were no matching records for James Madison and James Monroe in our orders table, the order_date and order_amount are NULL, which simply means there is no data for these fields. By simply 
adding a “where order_date is NULL” line to our SQL query, it returns a list of all customers who have not placed an order: 
SELECT first_name, last_name, order_date, order_amount 
FROM customers c 
LEFT JOIN orders o 
ON c.customer_id = o.customer_id WHERE order_date is NULL 
RIGHT JOIN 
Right join is a mirror version of the left join and allows to get a list of all orders, appended with customer information. 
select first_name, last_name, order_date, order_amount from customers c right join orders o on c.customer_id = o.customer_id 
 
Note that since there were no matching customer records for orders placed in 1795 and 1787, the first_name and last_name fields are NULL in the resulting set. 
Simply adding a “where first_name is NULL” line to our SQL query returns a list of all orders for which we failed to record information about the customers who placed them: 
SELECT first_name, last_name, order_date, order_amount 
FROM customers c 
RIGHT JOIN orders o 
ON c.customer_id = o.customer_id WHERE first_name is NULL 
FULL JOIN 
Finally, for a list of all records from both tables, we can use a full join. 
SELECT first_name, last_name, order_date, order_amount 
FROM customers c 
FULL JOIN orders o 
ON c.customer_id = o.customer_id 
 
 
ALGORITHM: 
1. Start 
2. Login to RDBMS 
3. Use Database 
4. Insert required data in Tables 
5. Perform Queries 
6. Exit RDBMS 
7. Stop 
 
CONCLUSION: Hence we have implemented all types of Joins, We have created View and also used sub query. 